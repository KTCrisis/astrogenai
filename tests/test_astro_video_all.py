#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te - Horoscope + ComfyUI + Flask
"""

import sys
import os
import time
import requests
import json
from datetime import datetime, date

# Ajouter le dossier courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_complete_integration():
    """Test complet de l'int√©gration"""
    
    print("üåü Test d'Int√©gration Compl√®te - Astro AI Video")
    print("=" * 70)
    
    # Configuration
    FLASK_URL = "http://127.0.0.1:5003"
    test_results = []
    
    print("üí° Assurez-vous que:")
    print("   - ComfyUI est d√©marr√©: cd /home/fluxart/ComfyUI && python main.py")
    print("   - Flask est d√©marr√©: python app.py")
    print()
    
    # 1. Test de base - Serveur Flask
    print("1Ô∏è‚É£ Test du serveur Flask")
    print("-" * 50)
    
    try:
        response = requests.get(f"{FLASK_URL}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Flask op√©rationnel")
            print(f"   Status: {data.get('status', 'unknown')}")
            print(f"   Ollama: {data.get('ollama', {}).get('status', 'unknown')}")
            print(f"   Astro: {data.get('astro_generator', {}).get('status', 'unknown')}")
            test_results.append(("Flask", True))
        else:
            print(f"‚ùå Flask non accessible: {response.status_code}")
            test_results.append(("Flask", False))
            return False
    except Exception as e:
        print(f"‚ùå Erreur connexion Flask: {e}")
        test_results.append(("Flask", False))
        return False
    
    # 2. Test g√©n√©ration d'horoscope
    print(f"\n2Ô∏è‚É£ Test g√©n√©ration d'horoscope")
    print("-" * 50)
    
    try:
        response = requests.post(f"{FLASK_URL}/api/generate_single_horoscope", 
                               json={"sign": "leo", "date": date.today().strftime("%Y-%m-%d")},
                               timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                horoscope = data["result"]
                print(f"‚úÖ Horoscope g√©n√©r√© pour {horoscope['sign']}")
                print(f"   Texte: {horoscope['horoscope'][:80]}...")
                print(f"   Mots: {horoscope['word_count']}")
                print(f"   Influence lunaire: {horoscope['lunar_influence']}")
                test_results.append(("Horoscope", True))
                
                # Sauvegarder pour les tests suivants
                global test_horoscope_data
                test_horoscope_data = horoscope
                
            else:
                print(f"‚ùå √âchec g√©n√©ration: {data.get('error')}")
                test_results.append(("Horoscope", False))
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            test_results.append(("Horoscope", False))
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration horoscope: {e}")
        test_results.append(("Horoscope", False))
    
    # 3. Test ComfyUI Status
    print(f"\n3Ô∏è‚É£ Test statut ComfyUI")
    print("-" * 50)
    
    try:
        response = requests.get(f"{FLASK_URL}/api/comfyui/status", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success") and data.get("connected"):
                print(f"‚úÖ ComfyUI connect√©")
                print(f"   Serveur: {data.get('server')}")
                print(f"   Formats: {len(data.get('available_formats', []))}")
                print(f"   Signes: {len(data.get('supported_signs', []))}")
                test_results.append(("ComfyUI Status", True))
            else:
                print(f"‚ùå ComfyUI non connect√©: {data.get('error')}")
                test_results.append(("ComfyUI Status", False))
        else:
            print(f"‚ùå Erreur endpoint ComfyUI: {response.status_code}")
            test_results.append(("ComfyUI Status", False))
    except Exception as e:
        print(f"‚ùå Erreur test ComfyUI: {e}")
        test_results.append(("ComfyUI Status", False))
    
    # 4. Test formats vid√©o
    print(f"\n4Ô∏è‚É£ Test formats vid√©o")
    print("-" * 50)
    
    try:
        response = requests.get(f"{FLASK_URL}/api/comfyui/formats", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                formats = data["formats"]
                print(f"‚úÖ {len(formats)} formats disponibles:")
                for name, specs in list(formats.items())[:3]:
                    print(f"   {name}: {specs['width']}x{specs['height']} ({specs['platform']})")
                test_results.append(("Formats", True))
            else:
                print(f"‚ùå Erreur formats: {data.get('error')}")
                test_results.append(("Formats", False))
        else:
            print(f"‚ùå Erreur endpoint formats: {response.status_code}")
            test_results.append(("Formats", False))
    except Exception as e:
        print(f"‚ùå Erreur test formats: {e}")
        test_results.append(("Formats", False))
    
    # 5. Test g√©n√©ration vid√©o ComfyUI
    print(f"\n5Ô∏è‚É£ Test g√©n√©ration vid√©o ComfyUI")
    print("-" * 50)
    
    generate_video = input("Voulez-vous tester la g√©n√©ration vid√©o ComfyUI ? (y/N): ").lower().strip()
    
    if generate_video == 'y':
        try:
            print("üöÄ G√©n√©ration vid√©o en cours...")
            start_time = time.time()
            
            response = requests.post(f"{FLASK_URL}/api/comfyui/generate_video", 
                                   json={
                                       "sign": "leo",
                                       "format": "test",
                                       "seed": 42
                                   },
                                   timeout=180)  # 3 minutes
            
            end_time = time.time()
            duration = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    result = data["result"]
                    print(f"‚úÖ Vid√©o g√©n√©r√©e en {duration:.1f} secondes")
                    print(f"   Signe: {result['sign_name']}")
                    print(f"   Taille: {result['file_size']} bytes")
                    print(f"   Dur√©e: {result['duration_seconds']}s")
                    print(f"   Chemin: {result['video_path']}")
                    print(f"   R√©solution: {result['specs']['width']}x{result['specs']['height']}")
                    test_results.append(("Vid√©o ComfyUI", True))
                else:
                    print(f"‚ùå √âchec g√©n√©ration vid√©o: {data.get('error')}")
                    test_results.append(("Vid√©o ComfyUI", False))
            else:
                print(f"‚ùå Erreur HTTP g√©n√©ration: {response.status_code}")
                print(f"   R√©ponse: {response.text}")
                test_results.append(("Vid√©o ComfyUI", False))
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration vid√©o: {e}")
            test_results.append(("Vid√©o ComfyUI", False))
    else:
        print("‚è≠Ô∏è  Test g√©n√©ration vid√©o ignor√©")
        test_results.append(("Vid√©o ComfyUI", "Ignor√©"))
    
    # 6. Test Chat IA
    print(f"\n6Ô∏è‚É£ Test chat IA")
    print("-" * 50)
    
    try:
        response = requests.post(f"{FLASK_URL}/api/ollama/chat", 
                               json={
                                   "message": "Donne-moi un conseil astrologique pour le Lion",
                                   "model": "mistral:latest"
                               },
                               timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                print(f"‚úÖ Chat IA op√©rationnel")
                print(f"   R√©ponse: {data['response'][:100]}...")
                test_results.append(("Chat IA", True))
            else:
                print(f"‚ùå Erreur chat: {data.get('error')}")
                test_results.append(("Chat IA", False))
        else:
            print(f"‚ùå Erreur endpoint chat: {response.status_code}")
            test_results.append(("Chat IA", False))
    except Exception as e:
        print(f"‚ùå Erreur test chat: {e}")
        test_results.append(("Chat IA", False))
    
    # 7. Test contexte astral
    print(f"\n7Ô∏è‚É£ Test contexte astral")
    print("-" * 50)
    
    try:
        response = requests.post(f"{FLASK_URL}/api/get_astral_context", 
                               json={"date": date.today().strftime("%Y-%m-%d")},
                               timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                context = data["result"]
                print(f"‚úÖ Contexte astral r√©cup√©r√©")
                print(f"   Date: {context['date']}")
                print(f"   Phase lunaire: {context['lunar_phase']}")
                print(f"   Saison: {context['season']}")
                print(f"   Plan√®tes: {len(context['influential_planets'])}")
                test_results.append(("Contexte astral", True))
            else:
                print(f"‚ùå Erreur contexte: {data.get('error')}")
                test_results.append(("Contexte astral", False))
        else:
            print(f"‚ùå Erreur endpoint contexte: {response.status_code}")
            test_results.append(("Contexte astral", False))
    except Exception as e:
        print(f"‚ùå Erreur test contexte: {e}")
        test_results.append(("Contexte astral", False))
    
    # R√©sum√© final
    print(f"\n{'='*70}")
    print("üìä R√âSUM√â FINAL")
    print("=" * 70)
    
    successful = 0
    total = len([r for r in test_results if r[1] != "Ignor√©"])
    
    for test_name, result in test_results:
        if result == True:
            status = "‚úÖ R√âUSSI"
            successful += 1
        elif result == False:
            status = "‚ùå √âCHOU√â"
        else:
            status = "‚è≠Ô∏è  IGNOR√â"
        
        print(f"{test_name:<20} {status}")
    
    print(f"\nüéØ R√©sultat: {successful}/{total} tests r√©ussis")
    
    if successful >= total * 0.8:  # 80% de r√©ussite
        print("\nüéâ Int√©gration largement r√©ussie!")
        print("üöÄ Votre syst√®me Astro AI Video est op√©rationnel")
        
        print("\nüìã Workflow complet disponible:")
        print("1. ‚úÖ G√©n√©ration d'horoscopes avec IA")
        print("2. ‚úÖ Cr√©ation de vid√©os avec ComfyUI")
        print("3. ‚úÖ Chat interactif avec Ollama")
        print("4. ‚úÖ Contexte astral d√©taill√©")
        print("5. ‚úÖ Interface web compl√®te")
        
        print("\nüé¨ Prochaines √©tapes:")
        print("‚Ä¢ Ajoutez vos musiques de fond")
        print("‚Ä¢ Cr√©ez des templates de miniatures")
        print("‚Ä¢ Configurez la publication automatique")
        print("‚Ä¢ Lancez votre cha√Æne d'horoscopes !")
        
        return True
    else:
        print("\n‚ö†Ô∏è  Certains composants ne fonctionnent pas")
        print("üîß V√©rifiez la configuration:")
        print("‚Ä¢ ComfyUI est-il d√©marr√© ?")
        print("‚Ä¢ Ollama fonctionne-t-il ?")
        print("‚Ä¢ Les d√©pendances sont-elles install√©es ?")
        
        return False

def test_workflow_complete():
    """Test du workflow complet: Horoscope -> Vid√©o -> Publication"""
    
    print(f"\nüéØ Test du workflow complet")
    print("=" * 70)
    
    workflow_test = input("Voulez-vous tester le workflow complet ? (y/N): ").lower().strip()
    
    if workflow_test != 'y':
        print("‚è≠Ô∏è  Test workflow ignor√©")
        return True
    
    FLASK_URL = "http://127.0.0.1:5003"
    
    try:
        print("üîÑ Workflow: Horoscope -> Vid√©o -> Infos")
        print("-" * 50)
        
        # √âtape 1: G√©n√©rer horoscope
        print("1Ô∏è‚É£ G√©n√©ration horoscope...")
        horoscope_response = requests.post(f"{FLASK_URL}/api/generate_single_horoscope", 
                                         json={"sign": "leo"}, timeout=30)
        
        if horoscope_response.status_code != 200:
            print("‚ùå √âchec g√©n√©ration horoscope")
            return False
        
        horoscope_data = horoscope_response.json()
        if not horoscope_data.get("success"):
            print("‚ùå Horoscope non g√©n√©r√©")
            return False
        
        horoscope = horoscope_data["result"]
        print(f"‚úÖ Horoscope g√©n√©r√©: {horoscope['word_count']} mots")
        
        # √âtape 2: G√©n√©rer vid√©o
        print("2Ô∏è‚É£ G√©n√©ration vid√©o...")
        video_response = requests.post(f"{FLASK_URL}/api/comfyui/generate_video", 
                                     json={
                                         "sign": "leo",
                                         "format": "test"
                                     }, timeout=180)
        
        if video_response.status_code != 200:
            print("‚ùå √âchec g√©n√©ration vid√©o")
            return False
        
        video_data = video_response.json()
        if not video_data.get("success"):
            print("‚ùå Vid√©o non g√©n√©r√©e")
            return False
        
        video_result = video_data["result"]
        print(f"‚úÖ Vid√©o g√©n√©r√©e: {video_result['file_size']} bytes")
        
        # √âtape 3: R√©cup√©rer contexte astral
        print("3Ô∏è‚É£ R√©cup√©ration contexte astral...")
        context_response = requests.post(f"{FLASK_URL}/api/get_astral_context", 
                                       json={}, timeout=15)
        
        if context_response.status_code != 200:
            print("‚ùå √âchec r√©cup√©ration contexte")
            return False
        
        context_data = context_response.json()
        if not context_data.get("success"):
            print("‚ùå Contexte non r√©cup√©r√©")
            return False
        
        context = context_data["result"]
        print(f"‚úÖ Contexte r√©cup√©r√©: {context['lunar_phase']}")
        
        # R√©sum√© du workflow
        print("\nüé¨ CONTENU G√âN√âR√â POUR PUBLICATION:")
        print("=" * 50)
        print(f"üìÖ Date: {horoscope['date']}")
        print(f"‚≠ê Signe: {horoscope['sign']}")
        print(f"üìù Horoscope: {horoscope['horoscope']}")
        print(f"üé• Vid√©o: {video_result['video_path']}")
        print(f"üìä Dur√©e: {video_result['duration_seconds']}s")
        print(f"üìê R√©solution: {video_result['specs']['width']}x{video_result['specs']['height']}")
        print(f"üåô Phase lunaire: {context['lunar_phase']}")
        print(f"üçÇ Saison: {context['season']}")
        
        print("\n‚úÖ Workflow complet fonctionnel!")
        print("üöÄ Pr√™t pour la production quotidienne")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow: {e}")
        return False

if __name__ == '__main__':
    print("D√©marrage des tests d'int√©gration...")
    
    # Test principal
    success = test_complete_integration()
    
    if success:
        # Test workflow complet
        workflow_success = test_workflow_complete()
        
        if workflow_success:
            print("\nüèÜ TOUS LES TESTS R√âUSSIS!")
            print("üéâ Votre syst√®me Astro AI Video est pr√™t!")
            
            print("\nüì± Acc√©dez √† votre interface web:")
            print("   üëâ http://127.0.0.1:5003/")
            
            print("\nüé¨ Fonctionnalit√©s disponibles:")
            print("‚Ä¢ G√©n√©ration d'horoscopes personnalis√©s")
            print("‚Ä¢ Cr√©ation de vid√©os avec ComfyUI")
            print("‚Ä¢ Chat interactif avec IA")
            print("‚Ä¢ Contexte astral d√©taill√©")
            print("‚Ä¢ G√©n√©ration en lot")
            print("‚Ä¢ T√©l√©chargement des vid√©os")
            
            exit(0)
        else:
            print("\n‚ö†Ô∏è  Workflow partiellement fonctionnel")
            exit(1)
    else:
        print("\n‚ùå Tests d'int√©gration √©chou√©s")
        exit(1)