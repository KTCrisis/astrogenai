#!/usr/bin/env python3
"""
Test ComfyUI MCP Server - Version Corrig√©e
Script de test pour le serveur MCP ComfyUI
"""

import asyncio
import sys
import os
import time

# Ajouter le dossier courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_comfyui_mcp():
    """Test du serveur MCP ComfyUI"""
    
    print("üé¨ Test du serveur MCP ComfyUI")
    print("=" * 50)
    
    try:
        # Import du serveur
        from comfyui_server_mcp import comfyui_generator
        print("‚úÖ Import du serveur r√©ussi")
        
        # Test 1: Statut
        print("\nüîç Test 1: V√©rification du statut")
        if comfyui_generator.test_connection():
            print("‚úÖ ComfyUI connect√©")
        else:
            print("‚ùå ComfyUI non connect√©")
            return False
        
        # Test 2: Formats disponibles
        print("\nüìã Test 2: Formats disponibles")
        formats = list(comfyui_generator.video_formats.keys())
        print(f"‚úÖ {len(formats)} formats: {', '.join(formats)}")
        
        # Test 3: Signes disponibles
        print("\n‚≠ê Test 3: Signes disponibles")
        signs = list(comfyui_generator.sign_metadata.keys())
        print(f"‚úÖ {len(signs)} signes: {', '.join(signs)}")
        
        # Test 4: G√©n√©ration de prompt
        print("\nüìù Test 4: G√©n√©ration de prompt")
        test_sign = "leo"
        prompt = comfyui_generator.create_constellation_prompt(test_sign)
        print(f"‚úÖ Prompt g√©n√©r√© pour {test_sign}")
        print(f"   Longueur: {len(prompt)} caract√®res")
        print(f"   Aper√ßu: {prompt[:100]}...")
        
        # Test 5: Pr√©paration de workflow
        print("\nüîß Test 5: Pr√©paration de workflow")
        workflow = comfyui_generator.prepare_workflow(test_sign, "test")
        print(f"‚úÖ Workflow pr√©par√©")
        print(f"   N≈ìuds: {len(workflow)}")
        print(f"   Dimensions: {workflow['5']['inputs']['width']}x{workflow['5']['inputs']['height']}")
        print(f"   Batch size: {workflow['5']['inputs']['batch_size']}")
        
        # Test 6: G√©n√©ration vid√©o (optionnel)
        print("\nüé¨ Test 6: G√©n√©ration vid√©o (optionnel)")
        generate_test = input("Voulez-vous tester la g√©n√©ration vid√©o ? (y/N): ").lower().strip()
        
        if generate_test == 'y':
            print("üöÄ G√©n√©ration en cours...")
            start_time = time.time()
            
            result = comfyui_generator.generate_constellation_video(
                sign=test_sign,
                format_name="test"
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            if result:
                print(f"‚úÖ Vid√©o g√©n√©r√©e en {duration:.1f} secondes")
                print(f"   Chemin: {result.video_path}")
                print(f"   Taille: {result.file_size} bytes")
                print(f"   Dur√©e: {result.duration_seconds:.1f}s")
            else:
                print("‚ùå G√©n√©ration √©chou√©e")
                return False
        else:
            print("‚è≠Ô∏è  Test de g√©n√©ration ignor√©")
        
        print("\n‚úÖ Tous les tests sont r√©ussis!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_mcp_tools():
    """Test des outils MCP - Version corrig√©e"""
    
    print("\nüõ†Ô∏è  Test des outils MCP")
    print("=" * 40)
    
    try:
        # Import du serveur MCP complet
        from comfyui_server_mcp import comfyui_generator
        
        # Test 1: Statut - Appel direct de la fonction
        print("\nüîç Test outil: get_comfyui_status")
        
        # Utiliser directement la classe plut√¥t que l'outil MCP
        connected = comfyui_generator.test_connection()
        status = {
            "success": True,
            "connected": connected,
            "server": comfyui_generator.server_address,
            "output_dir": str(comfyui_generator.output_dir),
            "available_formats": list(comfyui_generator.video_formats.keys()),
            "supported_signs": list(comfyui_generator.sign_metadata.keys()),
            "workflow_ready": True
        }
        
        if status["success"]:
            print("‚úÖ Statut r√©cup√©r√©")
            print(f"   Connect√©: {status['connected']}")
            print(f"   Serveur: {status['server']}")
            print(f"   Formats: {len(status['available_formats'])}")
            print(f"   Signes: {len(status['supported_signs'])}")
        else:
            print(f"‚ùå Erreur: {status.get('error', 'Erreur inconnue')}")
        
        # Test 2: Formats
        print("\nüìã Test outil: get_video_formats")
        formats = {}
        for name, specs in comfyui_generator.video_formats.items():
            formats[name] = {
                "width": specs.width,
                "height": specs.height,
                "fps": specs.fps,
                "duration": specs.duration,
                "aspect_ratio": specs.aspect_ratio,
                "platform": specs.platform,
                "batch_size": specs.batch_size
            }
        
        formats_result = {
            "success": True,
            "formats": formats,
            "count": len(formats)
        }
        
        if formats_result["success"]:
            print("‚úÖ Formats r√©cup√©r√©s")
            print(f"   Nombre: {formats_result['count']}")
            for name, specs in list(formats_result['formats'].items())[:3]:
                print(f"   {name}: {specs['width']}x{specs['height']} ({specs['platform']})")
        else:
            print(f"‚ùå Erreur: {formats_result.get('error', 'Erreur inconnue')}")
        
        # Test 3: Aper√ßu prompt
        print("\nüìù Test outil: preview_constellation_prompt")
        sign = "leo"
        
        if sign in comfyui_generator.sign_metadata:
            prompt = comfyui_generator.create_constellation_prompt(sign)
            sign_data = comfyui_generator.sign_metadata[sign]
            
            preview = {
                "success": True,
                "sign": sign_data["name"],
                "symbol": sign_data["symbol"],
                "prompt": prompt,
                "metadata": sign_data,
                "estimated_duration": "2-3 minutes"
            }
        else:
            preview = {
                "success": False,
                "error": f"Signe inconnu: {sign}"
            }
        
        if preview["success"]:
            print("‚úÖ Aper√ßu g√©n√©r√©")
            print(f"   Signe: {preview['sign']} {preview['symbol']}")
            print(f"   Dur√©e estim√©e: {preview['estimated_duration']}")
            print(f"   Prompt: {preview['prompt'][:80]}...")
        else:
            print(f"‚ùå Erreur: {preview['error']}")
        
        # Test 4: Test g√©n√©ration
        print("\nüé¨ Test outil: generate_constellation_video")
        
        generate_mcp_test = input("Voulez-vous tester la g√©n√©ration MCP ? (y/N): ").lower().strip()
        
        if generate_mcp_test == 'y':
            print("üöÄ G√©n√©ration MCP en cours...")
            start_time = time.time()
            
            # Utiliser directement la fonction de g√©n√©ration
            result = comfyui_generator.generate_constellation_video(
                sign="leo",
                format_name="test"
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            if result:
                print(f"‚úÖ G√©n√©ration MCP r√©ussie en {duration:.1f} secondes")
                print(f"   Signe: {result.sign_name}")
                print(f"   Chemin: {result.video_path}")
                print(f"   Taille: {result.file_size} bytes")
            else:
                print("‚ùå G√©n√©ration MCP √©chou√©e")
        else:
            print("‚è≠Ô∏è  Test g√©n√©ration MCP ignor√©")
        
        print("\n‚úÖ Tous les outils MCP fonctionnent!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des outils: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_workflow_customization():
    """Test de personnalisation du workflow"""
    
    print("\nüé® Test de personnalisation du workflow")
    print("=" * 50)
    
    try:
        from comfyui_server_mcp import comfyui_generator
        
        # Test avec diff√©rents formats
        formats_to_test = ["test", "youtube_short", "square"]
        
        for format_name in formats_to_test:
            print(f"\nüì± Test format: {format_name}")
            
            workflow = comfyui_generator.prepare_workflow("leo", format_name)
            specs = comfyui_generator.video_formats[format_name]
            
            # V√©rifier les param√®tres
            width = workflow['5']['inputs']['width']
            height = workflow['5']['inputs']['height']
            batch_size = workflow['5']['inputs']['batch_size']
            fps = workflow['22']['inputs']['frame_rate']
            
            print(f"   Dimensions: {width}x{height} (attendu: {specs.width}x{specs.height})")
            print(f"   Batch size: {batch_size} (attendu: {specs.batch_size})")
            print(f"   FPS: {fps} (attendu: {specs.fps})")
            
            # V√©rifier que les valeurs correspondent
            if width == specs.width and height == specs.height and batch_size == specs.batch_size:
                print(f"   ‚úÖ Format {format_name} correctement configur√©")
            else:
                print(f"   ‚ùå Format {format_name} mal configur√©")
                return False
        
        # Test avec seed personnalis√©
        print("\nüé≤ Test avec seed personnalis√©")
        workflow_with_seed = comfyui_generator.prepare_workflow("leo", "test", seed=12345)
        if workflow_with_seed['6']['inputs']['seed'] == 12345:
            print("‚úÖ Seed personnalis√© appliqu√©")
        else:
            print("‚ùå Seed personnalis√© non appliqu√©")
            return False
        
        # Test avec prompt personnalis√©
        print("\nüìù Test avec prompt personnalis√©")
        custom_prompt = '"0": "test prompt frame 0", "8": "test prompt frame 8", "16": "test prompt frame 16"'
        workflow_custom = comfyui_generator.prepare_workflow("leo", "test", custom_prompt=custom_prompt)
        if workflow_custom['18']['inputs']['prompts'] == custom_prompt:
            print("‚úÖ Prompt personnalis√© appliqu√©")
        else:
            print("‚ùå Prompt personnalis√© non appliqu√©")
            return False
        
        print("\n‚úÖ Tous les tests de personnalisation r√©ussis!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de personnalisation: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_error_handling():
    """Test de gestion des erreurs"""
    
    print("\nüõ°Ô∏è  Test de gestion des erreurs")
    print("=" * 40)
    
    try:
        from comfyui_server_mcp import comfyui_generator
        
        # Test 1: Signe inexistant
        print("\n‚ùå Test signe inexistant")
        if "inexistant" not in comfyui_generator.sign_metadata:
            print("‚úÖ Erreur signe inexistant bien g√©r√©e")
        else:
            print("‚ùå Erreur signe inexistant mal g√©r√©e")
            return False
        
        # Test 2: Format inexistant
        print("\n‚ùå Test format inexistant")
        if "inexistant" not in comfyui_generator.video_formats:
            print("‚úÖ Erreur format inexistant bien g√©r√©e")
        else:
            print("‚ùå Erreur format inexistant mal g√©r√©e")
            return False
        
        # Test 3: G√©n√©ration avec param√®tres invalides
        print("\n‚ùå Test g√©n√©ration avec param√®tres invalides")
        try:
            # Ceci devrait lever une erreur
            workflow = comfyui_generator.prepare_workflow("inexistant", "test")
            print("‚ùå Erreur non d√©tect√©e")
            return False
        except Exception:
            print("‚úÖ Erreur de g√©n√©ration bien g√©r√©e")
        
        print("\n‚úÖ Tous les tests de gestion d'erreurs r√©ussis!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de gestion d'erreurs: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_debug_video_generation():
    """Test de debug pour la g√©n√©ration vid√©o"""
    
    print("\nüîç Test de debug - G√©n√©ration vid√©o")
    print("=" * 50)
    
    try:
        from comfyui_server_mcp import comfyui_generator
        
        # Test de connexion d√©taill√©
        print("\nüîó Test de connexion d√©taill√©")
        try:
            import requests
            response = requests.get(f"http://{comfyui_generator.server_address}/system_stats", timeout=5)
            print(f"‚úÖ Connexion r√©ussie: {response.status_code}")
            print(f"   R√©ponse: {response.json()}")
        except Exception as e:
            print(f"‚ùå Connexion √©chou√©e: {e}")
            return False
        
        # Test de l'historique
        print("\nüìã Test de l'historique ComfyUI")
        try:
            response = requests.get(f"http://{comfyui_generator.server_address}/history", timeout=5)
            history = response.json()
            print(f"‚úÖ Historique r√©cup√©r√©: {len(history)} entr√©es")
            
            # Afficher les 3 derni√®res entr√©es
            for i, (prompt_id, data) in enumerate(list(history.items())[-3:]):
                print(f"   {i+1}. {prompt_id}: {data.get('status', {}).get('completed', 'N/A')}")
                
        except Exception as e:
            print(f"‚ùå Erreur historique: {e}")
        
        # Test de g√©n√©ration avec debug
        print("\nüé¨ Test de g√©n√©ration avec debug")
        debug_test = input("Voulez-vous tester la g√©n√©ration avec debug ? (y/N): ").lower().strip()
        
        if debug_test == 'y':
            print("üöÄ G√©n√©ration avec debug...")
            
            # Pr√©parer le workflow avec debug
            workflow = comfyui_generator.prepare_workflow("leo", "test")
            
            print(f"üìù Workflow pr√©par√©:")
            print(f"   N≈ìuds: {list(workflow.keys())}")
            print(f"   Dimensions: {workflow['5']['inputs']['width']}x{workflow['5']['inputs']['height']}")
            print(f"   Seed: {workflow['6']['inputs']['seed']}")
            print(f"   Prompt: {workflow['18']['inputs']['prompts'][:100]}...")
            
            # Test de mise en queue
            try:
                response = comfyui_generator.queue_prompt(workflow)
                prompt_id = response.get('prompt_id')
                print(f"‚úÖ Prompt mis en queue: {prompt_id}")
                
                # Attendre et v√©rifier
                print("‚è≥ Attente de la g√©n√©ration...")
                success = comfyui_generator.wait_for_completion(prompt_id)
                
                if success:
                    print("‚úÖ G√©n√©ration termin√©e")
                    
                    # Rechercher la vid√©o
                    video_path = comfyui_generator.find_generated_video(prompt_id)
                    
                    if video_path:
                        print(f"‚úÖ Vid√©o trouv√©e: {video_path}")
                        
                        # V√©rifier si le fichier existe
                        if os.path.exists(video_path):
                            file_size = os.path.getsize(video_path)
                            print(f"‚úÖ Fichier confirm√©: {file_size} bytes")
                        else:
                            print(f"‚ùå Fichier non trouv√©: {video_path}")
                    else:
                        print("‚ùå Vid√©o non trouv√©e dans l'historique")
                        
                        # Debug de l'historique
                        try:
                            response = requests.get(f"http://{comfyui_generator.server_address}/history/{prompt_id}")
                            history_data = response.json()
                            print(f"üîç Debug historique pour {prompt_id}:")
                            print(f"   Status: {history_data.get(prompt_id, {}).get('status', 'N/A')}")
                            print(f"   Outputs: {list(history_data.get(prompt_id, {}).get('outputs', {}).keys())}")
                        except Exception as e:
                            print(f"‚ùå Erreur debug historique: {e}")
                else:
                    print("‚ùå G√©n√©ration √©chou√©e")
                    
            except Exception as e:
                print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
                import traceback
                traceback.print_exc()
        else:
            print("‚è≠Ô∏è  Test de g√©n√©ration debug ignor√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de debug: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Fonction principale"""
    
    print("üåü Test Complet ComfyUI MCP Server - Version Corrig√©e")
    print("=" * 70)
    
    print("üí° Assurez-vous que ComfyUI est d√©marr√©:")
    print("   cd /home/fluxart/ComfyUI && python main.py")
    print()
    
    # Tests progressifs
    tests = [
        ("üé¨ G√©n√©rateur ComfyUI", test_comfyui_mcp),
        ("üõ†Ô∏è  Outils MCP", test_mcp_tools),
        ("üé® Personnalisation workflow", test_workflow_customization),
        ("üõ°Ô∏è  Gestion d'erreurs", test_error_handling),
        ("üîç Debug g√©n√©ration vid√©o", test_debug_video_generation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*70}")
        print(f"üß™ {test_name}")
        print('='*70)
        
        try:
            success = await test_func()
            results.append((test_name, success))
            
            if success:
                print(f"‚úÖ {test_name}: R√âUSSI")
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
                
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")
            results.append((test_name, False))
        
        time.sleep(1)  # Pause entre les tests
    
    # R√©sum√© final
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â FINAL")
    print("=" * 70)
    
    successful = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHOU√â"
        print(f"{test_name:<35} {status}")
        if success:
            successful += 1
    
    print(f"\nüéØ R√©sultat final: {successful}/{total} tests r√©ussis")
    
    if successful >= total - 1:  # Permettre 1 √©chec
        print("\nüéâ Tests largement r√©ussis!")
        print("üöÄ Le serveur MCP ComfyUI est pr√™t √† √™tre utilis√©")
        
        print("\nüìã Prochaines √©tapes:")
        print("1. V√©rifier le probl√®me de r√©cup√©ration des vid√©os g√©n√©r√©es")
        print("2. D√©marrer le serveur MCP: python comfyui_server_mcp.py")
        print("3. Int√©grer dans l'app Flask")
        print("4. Tester les endpoints API")
        print("5. G√©n√©rer vos premi√®res vid√©os de constellations !")
        
        return 0
    else:
        print("\n‚ö†Ô∏è  Plusieurs tests ont √©chou√©")
        print("üîß V√©rifiez la configuration ComfyUI")
        print("üí° Points √† v√©rifier:")
        print("   - ComfyUI est d√©marr√© et accessible")
        print("   - Les extensions AnimateDiff et VideoHelperSuite sont install√©es")
        print("   - Les mod√®les requis sont pr√©sents")
        print("   - Le dossier de sortie est accessible")
        print("   - Pas de conflits de ports")
        return 1

if __name__ == '__main__':
    exit_code = asyncio.run(main())
    sys.exit(exit_code)