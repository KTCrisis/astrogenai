#!/usr/bin/env python3
"""
Test de g√©n√©ration d'introduction hebdomadaire am√©lior√©e
Script pour tester uniquement la section intro avec les nouvelles contraintes de flux
"""

import asyncio
import datetime
import sys
import os

# Ajouter le chemin pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def setup_imports():
    """Configure les imports n√©cessaires"""
    print("üîß Configuration des imports...")
    
    services = {}
    
    try:
        from astro_core.services.astro_mcp import astro_generator
        services['astro'] = astro_generator
        print("‚úÖ Astro Generator import√©")
    except ImportError as e:
        print(f"‚ùå Astro Generator: {e}")
        sys.exit(1)
    
    try:
        from astro_core.services.astrochart.astrochart_mcp import astro_calculator
        services['astrochart'] = astro_calculator
        print("‚úÖ AstroChart Calculator import√©")
    except ImportError as e:
        print(f"‚ùå AstroChart Calculator: {e}")
        sys.exit(1)
    
    return services

def get_improved_intro_template():
    """Template d'introduction am√©lior√© avec contraintes de flux"""
    
    return """Tu es un astrologue expert et passionn√©, cr√©ateur de contenu YouTube sp√©cialis√© en astrologie moderne et accessible.

MISSION: √âcris UNIQUEMENT une introduction captivante de 800 mots minimum pour une vid√©o astrologique hebdomadaire.

P√âRIODE: {period}
√âV√âNEMENTS MAJEURS: {events}

CONTEXTE ASTRAL D√âTAILL√â:
{astral_context}

EXIGENCES DE LONGUEUR:
- MINIMUM 800 mots absolument requis
- D√©veloppe chaque point en profondeur
- N'h√©site pas √† √™tre g√©n√©reux dans les descriptions
- Si tu atteins moins de 800 mots, continue √† d√©velopper

LANGUE ET STYLE:
- Fran√ßais impeccable, registre soutenu mais accessible
- Ton chaleureux, myst√©rieux mais rassurant
- Vocabulaire riche et vari√©
- √âvite les r√©p√©titions de mots

TERMINOLOGIE ASTROLOGIQUE:
- Utilise les termes fran√ßais corrects
- "conjonction" pas "conjunction"
- "trigone" pas "trine"
- "carr√©" pas "square"

‚ö†Ô∏è CONTRAINTES DE FLUX CRITIQUES:
- Cette introduction fait partie d'une vid√©o CONTINUE
- Ne termine PAS par "bonne semaine", "√† bient√¥t", ou autre formule de cl√¥ture
- Termine par une TRANSITION vers l'analyse des √©v√©nements cosmiques
- Maintiens l'engagement pour la suite imm√©diate

STRUCTURE OBLIGATOIRE:

ACCUEIL CHALEUREUX:
- "Bienvenue dans votre Guide AstroGenAI hebdomadaire !"
- Salutation personnalis√©e selon la saison

ACCROCHE COSMIQUE:
- M√©taphore po√©tique sur l'√©nergie de la semaine
- Image √©vocatrice du ciel √©toil√© actuel
- Teasing de l'√©v√©nement le plus spectaculaire

√âV√âNEMENT PHARE:
- Description d√©taill√©e de l'√©v√©nement cosmique majeur
- Contexte historique ou symbolique
- Impact √©motionnel et spirituel attendu

PREVIEW DE LA VID√âO:
- Annonce des sections √† venir avec enthousiasme
- Promesse de r√©v√©lations personnalis√©es par signe
- Mention des rituels/pratiques qui seront partag√©s

TRANSITION OBLIGATOIRE (derni√®re phrase):
- "Plongeons maintenant dans le d√©tail de ces √©nergies cosmiques..."
- OU "Explorons ensemble comment ces forces c√©lestes se d√©ploient..."
- OU "D√©couvrons pr√©cis√©ment comment ces influences vont fa√ßonner notre semaine..."

‚ùå INTERDICTIONS ABSOLUES:
- "Bonne semaine", "excellente semaine", "belle semaine"
- "√Ä bient√¥t", "√† tr√®s vite", "au revoir"
- "Prenez soin de vous", "portez-vous bien"
- Toute formule de conclusion d√©finitive
- Ne mets JAMAIS de balises <think> ou </think> dans ta r√©ponse
- √âcris directement le contenu final sans r√©flexion visible
- Pas de m√©tacommentaires sur ton processus de pens√©e

MOTS-CL√âS √Ä INT√âGRER NATURELLEMENT:
- "√©nergie cosmique", "vibrations c√©lestes"
- "voyage astral", "guidance des √©toiles"
- "transformation", "r√©v√©lation", "illumination"

√âcris maintenant cette introduction substantielle avec transition fluide:"""

async def test_intro_generation(services):
    """
    Test de g√©n√©ration d'introduction avec le template am√©lior√©
    """
    print("üöÄ Test de g√©n√©ration d'introduction hebdomadaire...")
    print("=" * 60)
    
    astro_generator = services['astro']
    astro_calculator = services['astrochart']
    
    # D√©finir la p√©riode de test
    today = datetime.date.today()
    start_of_week = today - datetime.timedelta(days=today.weekday())
    end_of_week = start_of_week + datetime.timedelta(days=6)
    
    print(f"üìÖ P√©riode test√©e : du {start_of_week.strftime('%d/%m')} au {end_of_week.strftime('%d/%m')}")
    print(f"ü§ñ Mod√®le Ollama utilis√© : {astro_generator.ollama_model}")
        # D√©marrer le monitoring des ressources
    import psutil
    import time
    start_time = time.time()
    
    # Mesure des ressources avant g√©n√©ration
    process_info_before = None
    try:
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
            if 'ollama' in proc.info['name'].lower():
                process_info_before = {
                    'cpu_percent': proc.info['cpu_percent'],
                    'memory_mb': proc.info['memory_info'].rss / (1024 * 1024)
                }
                break
    except:
        pass
    print("-" * 40)
    
    try:
        # 1. Calculer les √©v√©nements de la semaine
        print("üîÆ Calcul des √©v√©nements astrologiques...")
        weekly_events = astro_calculator.get_major_events_for_week(start_of_week, end_of_week)
        events_str = "\n".join([f"- Le {e['date']}: {e['description']} ({e['type']})" for e in weekly_events])
        
        print(f"‚úÖ {len(weekly_events)} √©v√©nements trouv√©s")
        for event in weekly_events[:3]:  # Afficher les 3 premiers
            print(f"   ‚Ä¢ {event['date']}: {event['description']}")
        
        # 2. Formater le contexte astral
        print("\nüåü Formatage du contexte astral...")
        astral_context_formatted = astro_generator._format_astral_context_for_weekly(start_of_week, end_of_week)
        print("‚úÖ Contexte astral pr√©par√©")
        
        # 3. Cr√©er le prompt avec le template am√©lior√©
        print("\nüìù Cr√©ation du prompt am√©lior√©...")
        template = get_improved_intro_template()
        prompt = template.format(
            period=f"{start_of_week.strftime('%d/%m')} au {end_of_week.strftime('%d/%m')}",
            events=events_str,
            astral_context=astral_context_formatted
        )
        
        print(f"‚úÖ Prompt cr√©√© ({len(prompt)} caract√®res)")
        
        # 4. G√©n√©ration avec Ollama
        print("\nü§ñ G√©n√©ration avec Ollama...")
        print("‚è≥ Patientez, g√©n√©ration en cours...")
        
        intro_text = await astro_generator._call_ollama_for_long_content(prompt)
        
        # 5. Nettoyage sp√©cifique pour l'intro
        print("\nüßπ Nettoyage du texte...")
        
        # Supprimer les formules de cl√¥ture inappropri√©es
        import re
        unwanted_closures = [
            "bonne semaine", "belle semaine", "excellente semaine", "merveilleuse semaine",
            "√† bient√¥t", "√† tr√®s vite", "au revoir", "√† la prochaine",
            "prenez soin de vous", "portez-vous bien", "que les √©toiles vous accompagnent"
        ]
        
        original_length = len(intro_text)
        
        for closure in unwanted_closures:
            intro_text = re.sub(rf'\b{re.escape(closure)}\b[.!]*\s*$', '', intro_text, flags=re.IGNORECASE)
            intro_text = re.sub(rf'\b{re.escape(closure)}\b[.!]*\s*\n', '', intro_text, flags=re.IGNORECASE)
        
        # Nettoyage g√©n√©ral
        intro_text = astro_generator._clean_script_text(intro_text)
        
        cleaned_length = len(intro_text)
        if cleaned_length < original_length:
            print(f"‚úÖ Nettoyage effectu√© ({original_length - cleaned_length} caract√®res supprim√©s)")
        
        # 6. Analyse des r√©sultats
        print("\nüìä ANALYSE DES R√âSULTATS")
        print("=" * 40)
        
        word_count = len(intro_text.split())
        char_count = len(intro_text)
        
        print(f"üìè Longueur : {word_count} mots ({char_count} caract√®res)")
        print(f"üéØ Objectif : 800+ mots ({'‚úÖ ATTEINT' if word_count >= 800 else '‚ùå TROP COURT'})")
        
        # V√©rifier la transition finale
        last_sentences = intro_text.split('.')[-3:]  # 3 derni√®res phrases
        last_text = '.'.join(last_sentences).lower()
        
        transition_indicators = ['plongeons', 'explorons', 'd√©couvrons', 'maintenant', 'pr√©cis√©ment']
        has_good_transition = any(word in last_text for word in transition_indicators)
        print(f"üîÑ Transition : {'‚úÖ BONNE' if has_good_transition else '‚ö†Ô∏è √Ä V√âRIFIER'}")
        
        # V√©rifier l'absence de formules de cl√¥ture
        bad_endings = any(closure in intro_text.lower() for closure in unwanted_closures)
        print(f"üö´ Cl√¥tures : {'‚ùå TROUV√âES' if bad_endings else '‚úÖ PROPRE'}")
        
        # 7. Affichage du r√©sultat
        print(f"\nüìñ INTRODUCTION G√âN√âR√âE")
        print("=" * 60)
        print(intro_text)
        print("=" * 60)
        
        # 8. Derni√®res phrases pour v√©rifier la transition
        print(f"\nüîç DERNI√àRES PHRASES (transition) :")
        sentences = intro_text.split('.')
        for sentence in sentences[-3:]:
            if sentence.strip():
                print(f"   ‚Ä¢ {sentence.strip()}.")
        
        print(f"\n‚úÖ Test d'introduction termin√© avec succ√®s !")
        print(f"üìà Score global : {word_count} mots g√©n√©r√©s")
        
        return intro_text
        
    except Exception as e:
        print(f"\n‚ùå Erreur durant le test : {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üåü" + "="*58)
    print("üåü TEST G√âN√âRATION INTRO HEBDOMADAIRE AM√âLIOR√âE")
    print("üåü" + "="*58)
    
    services = setup_imports()
    result = asyncio.run(test_intro_generation(services))
    
    if result:
        print(f"\nüéâ Test r√©ussi ! Introduction pr√™te √† l'emploi.")
    else:
        print(f"\nüí• Test √©chou√©. V√©rifiez les logs ci-dessus.")